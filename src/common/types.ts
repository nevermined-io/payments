export const FIRST_STEP_NAME = 'init'

/**
 * A task defines something that the agent should execute.
 */
export interface Task extends ExecutionOptions {
  /**
   * The unique identifier of the task
   */
  task_id: string

  /**
   * The status of the execution
   */
  task_status: AgentExecutionStatus

  /**
   * The steps executed by the agent to complete the task
   */
  steps: Step[]

  /**
   * The name of the task
   */
  name?: string
}

export interface Step extends ExecutionOptions {
  /**
   * The unique identifier of the step
   */
  step_id: string

  /**
   * The task that the step belongs to
   */
  task_id: string

  /**
   * The name of the step
   */
  name?: string

  /**
   * The status of the execution
   */
  step_status: AgentExecutionStatus

  /**
   * The step preceeding the current step if any
   */
  predecessor?: string

  /**
   * Whether this is the last step in the task.
   */
  is_last?: boolean
}

export interface ExecutionOptions extends ExecutionInput, ExecutionOutput {
  /**
   * When the execution was created
   */
  created_at?: Date

  /**
   * When the execution was last updated
   */
  updated_at?: Date

  /**
   * The number of retries for the task or step
   */
  retries?: number

  /**
   * The cost in credits resulting from the execution of the task or the step
   */
  cost?: number
}

/**
 * This task can be a question, a prompt, etc. It can include additional parameters and artifacts.
 */
export interface ExecutionInput {
  /**
   * The input for the task. It can be a prompt, a question, etc
   */
  input_query: string

  /**
   * Additional parameters required for the task
   */
  input_params?: { [name: string]: string }[]

  /**
   * List of artifact ids that are associated with the task
   */
  input_artifacts?: Artifact[]
}

/**
 * Output of the task or step execution
 */
export interface ExecutionOutput {
  /**
   * The main output generated by a task or step
   */
  output: any

  /**
   * Additional output generated
   */

  output_additional?: { [name: string]: any }[]

  /**
   * List of artifact generated by the task or step
   */
  output_artifacts?: any[]
}

/**
 * The execution status of a task or a step
 */
export enum AgentExecutionStatus {
  /**
   * The execution is pending
   */
  Pending = 'Pending',

  /**
   * The execution is in progress
   */
  In_Progress = 'In_Progress',

  /**
   * The step or task is not ready to be executed
   */
  Not_Ready = 'Not_Ready',

  /**
   * The execution is completed
   */
  Completed = 'Completed',

  /**
   * The execution is failed
   */
  Failed = 'Failed',
}

export interface Artifact {
  /**
   * The unique identifier of the artifact
   */
  artifact_id: string
  /**
   * Reference to the artifact in a local or remote storage.
   * If it's in the local storage, the URL should be a relative path to the agent workspace.
   * Examples:
   *   - `file://path/to/file`
   *   - `http://example.com/path/to/file`
   */
  url: string
}

export interface TaskLogMessage {
  /**
   * Log level
   */
  level: 'info' | 'error' | 'warning' | 'debug'

  /**
   * The log message
   */
  message: string

  /**
   * Identifier of the task associated with the log
   */
  task_id: string

  /**
   * The status of the task
   */
  task_status?: AgentExecutionStatus

  /**
   * The step id associated with the log message if any
   */
  step_id?: string
}

export type TaskCallback = (data: any) => void

export interface CreateTaskDto {
  /**
   * The query parameter for the task
   */
  query: string

  /**
   * The name of the task
   */
  name?: string

  /**
   * Additional parameters required for the task
   */
  additional_params?: { [name: string]: string }[]

  /**
   * Additional artifacts required for the task
   */
  artifacts?: Artifact[]
}
